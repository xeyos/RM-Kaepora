// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: local.proto

#ifndef PROTOBUF_local_2eproto__INCLUDED
#define PROTOBUF_local_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace navi {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_local_2eproto();
void protobuf_AssignDesc_local_2eproto();
void protobuf_ShutdownFile_local_2eproto();

class OptionsSave;
class FriendData;
class Friend;
class FriendList;

// ===================================================================

class OptionsSave : public ::google::protobuf::Message {
 public:
  OptionsSave();
  virtual ~OptionsSave();

  OptionsSave(const OptionsSave& from);

  inline OptionsSave& operator=(const OptionsSave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OptionsSave& default_instance();

  void Swap(OptionsSave* other);

  // implements Message ----------------------------------------------

  OptionsSave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OptionsSave& from);
  void MergeFrom(const OptionsSave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string languaje = 2;
  inline bool has_languaje() const;
  inline void clear_languaje();
  static const int kLanguajeFieldNumber = 2;
  inline const ::std::string& languaje() const;
  inline void set_languaje(const ::std::string& value);
  inline void set_languaje(const char* value);
  inline void set_languaje(const char* value, size_t size);
  inline ::std::string* mutable_languaje();
  inline ::std::string* release_languaje();
  inline void set_allocated_languaje(::std::string* languaje);

  // @@protoc_insertion_point(class_scope:navi.OptionsSave)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_languaje();
  inline void clear_has_languaje();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* languaje_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_local_2eproto();
  friend void protobuf_AssignDesc_local_2eproto();
  friend void protobuf_ShutdownFile_local_2eproto();

  void InitAsDefaultInstance();
  static OptionsSave* default_instance_;
};
// -------------------------------------------------------------------

class FriendData : public ::google::protobuf::Message {
 public:
  FriendData();
  virtual ~FriendData();

  FriendData(const FriendData& from);

  inline FriendData& operator=(const FriendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendData& default_instance();

  void Swap(FriendData* other);

  // implements Message ----------------------------------------------

  FriendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendData& from);
  void MergeFrom(const FriendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes port = 1 [default = "NONE"];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const void* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // optional bytes ip = 2 [default = "NONE"];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const void* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional bytes date = 3 [default = "NONE"];
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 3;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const void* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // required bytes key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // repeated .navi.FriendList commonFriends = 5;
  inline int commonfriends_size() const;
  inline void clear_commonfriends();
  static const int kCommonFriendsFieldNumber = 5;
  inline const ::navi::FriendList& commonfriends(int index) const;
  inline ::navi::FriendList* mutable_commonfriends(int index);
  inline ::navi::FriendList* add_commonfriends();
  inline const ::google::protobuf::RepeatedPtrField< ::navi::FriendList >&
      commonfriends() const;
  inline ::google::protobuf::RepeatedPtrField< ::navi::FriendList >*
      mutable_commonfriends();

  // @@protoc_insertion_point(class_scope:navi.FriendData)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* port_;
  static ::std::string* _default_port_;
  ::std::string* ip_;
  static ::std::string* _default_ip_;
  ::std::string* date_;
  static ::std::string* _default_date_;
  ::std::string* key_;
  ::google::protobuf::RepeatedPtrField< ::navi::FriendList > commonfriends_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_local_2eproto();
  friend void protobuf_AssignDesc_local_2eproto();
  friend void protobuf_ShutdownFile_local_2eproto();

  void InitAsDefaultInstance();
  static FriendData* default_instance_;
};
// -------------------------------------------------------------------

class Friend : public ::google::protobuf::Message {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();

  void Swap(Friend* other);

  // implements Message ----------------------------------------------

  Friend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uname = 5;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 5;
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // required string server = 8;
  inline bool has_server() const;
  inline void clear_server();
  static const int kServerFieldNumber = 8;
  inline const ::std::string& server() const;
  inline void set_server(const ::std::string& value);
  inline void set_server(const char* value);
  inline void set_server(const char* value, size_t size);
  inline ::std::string* mutable_server();
  inline ::std::string* release_server();
  inline void set_allocated_server(::std::string* server);

  // optional string identifier = 6 [default = ""];
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 6;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  inline void set_allocated_identifier(::std::string* identifier);

  // optional string avatar = 7 [default = ""];
  inline bool has_avatar() const;
  inline void clear_avatar();
  static const int kAvatarFieldNumber = 7;
  inline const ::std::string& avatar() const;
  inline void set_avatar(const ::std::string& value);
  inline void set_avatar(const char* value);
  inline void set_avatar(const char* value, size_t size);
  inline ::std::string* mutable_avatar();
  inline ::std::string* release_avatar();
  inline void set_allocated_avatar(::std::string* avatar);

  // optional int32 port = 1 [default = 0];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string ip = 2 [default = "NONE"];
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:navi.Friend)
 private:
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_server();
  inline void clear_has_server();
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_avatar();
  inline void clear_has_avatar();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uname_;
  ::std::string* server_;
  ::std::string* identifier_;
  ::std::string* avatar_;
  ::std::string* ip_;
  static ::std::string* _default_ip_;
  ::std::string* key_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_local_2eproto();
  friend void protobuf_AssignDesc_local_2eproto();
  friend void protobuf_ShutdownFile_local_2eproto();

  void InitAsDefaultInstance();
  static Friend* default_instance_;
};
// -------------------------------------------------------------------

class FriendList : public ::google::protobuf::Message {
 public:
  FriendList();
  virtual ~FriendList();

  FriendList(const FriendList& from);

  inline FriendList& operator=(const FriendList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendList& default_instance();

  void Swap(FriendList* other);

  // implements Message ----------------------------------------------

  FriendList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendList& from);
  void MergeFrom(const FriendList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .navi.FriendData friend = 1;
  inline int friend__size() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 1;
  inline const ::navi::FriendData& friend_(int index) const;
  inline ::navi::FriendData* mutable_friend_(int index);
  inline ::navi::FriendData* add_friend_();
  inline const ::google::protobuf::RepeatedPtrField< ::navi::FriendData >&
      friend_() const;
  inline ::google::protobuf::RepeatedPtrField< ::navi::FriendData >*
      mutable_friend_();

  // @@protoc_insertion_point(class_scope:navi.FriendList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::navi::FriendData > friend__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_local_2eproto();
  friend void protobuf_AssignDesc_local_2eproto();
  friend void protobuf_ShutdownFile_local_2eproto();

  void InitAsDefaultInstance();
  static FriendList* default_instance_;
};
// ===================================================================


// ===================================================================

// OptionsSave

// required int32 port = 1;
inline bool OptionsSave::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OptionsSave::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OptionsSave::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OptionsSave::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 OptionsSave::port() const {
  return port_;
}
inline void OptionsSave::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional string languaje = 2;
inline bool OptionsSave::has_languaje() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OptionsSave::set_has_languaje() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OptionsSave::clear_has_languaje() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OptionsSave::clear_languaje() {
  if (languaje_ != &::google::protobuf::internal::kEmptyString) {
    languaje_->clear();
  }
  clear_has_languaje();
}
inline const ::std::string& OptionsSave::languaje() const {
  return *languaje_;
}
inline void OptionsSave::set_languaje(const ::std::string& value) {
  set_has_languaje();
  if (languaje_ == &::google::protobuf::internal::kEmptyString) {
    languaje_ = new ::std::string;
  }
  languaje_->assign(value);
}
inline void OptionsSave::set_languaje(const char* value) {
  set_has_languaje();
  if (languaje_ == &::google::protobuf::internal::kEmptyString) {
    languaje_ = new ::std::string;
  }
  languaje_->assign(value);
}
inline void OptionsSave::set_languaje(const char* value, size_t size) {
  set_has_languaje();
  if (languaje_ == &::google::protobuf::internal::kEmptyString) {
    languaje_ = new ::std::string;
  }
  languaje_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OptionsSave::mutable_languaje() {
  set_has_languaje();
  if (languaje_ == &::google::protobuf::internal::kEmptyString) {
    languaje_ = new ::std::string;
  }
  return languaje_;
}
inline ::std::string* OptionsSave::release_languaje() {
  clear_has_languaje();
  if (languaje_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = languaje_;
    languaje_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OptionsSave::set_allocated_languaje(::std::string* languaje) {
  if (languaje_ != &::google::protobuf::internal::kEmptyString) {
    delete languaje_;
  }
  if (languaje) {
    set_has_languaje();
    languaje_ = languaje;
  } else {
    clear_has_languaje();
    languaje_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendData

// optional bytes port = 1 [default = "NONE"];
inline bool FriendData::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendData::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendData::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendData::clear_port() {
  if (port_ != _default_port_) {
    port_->assign(*_default_port_);
  }
  clear_has_port();
}
inline const ::std::string& FriendData::port() const {
  return *port_;
}
inline void FriendData::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == _default_port_) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void FriendData::set_port(const char* value) {
  set_has_port();
  if (port_ == _default_port_) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void FriendData::set_port(const void* value, size_t size) {
  set_has_port();
  if (port_ == _default_port_) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendData::mutable_port() {
  set_has_port();
  if (port_ == _default_port_) {
    port_ = new ::std::string(*_default_port_);
  }
  return port_;
}
inline ::std::string* FriendData::release_port() {
  clear_has_port();
  if (port_ == _default_port_) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(_default_port_);
    return temp;
  }
}
inline void FriendData::set_allocated_port(::std::string* port) {
  if (port_ != _default_port_) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(_default_port_);
  }
}

// optional bytes ip = 2 [default = "NONE"];
inline bool FriendData::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendData::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendData::clear_ip() {
  if (ip_ != _default_ip_) {
    ip_->assign(*_default_ip_);
  }
  clear_has_ip();
}
inline const ::std::string& FriendData::ip() const {
  return *ip_;
}
inline void FriendData::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FriendData::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FriendData::set_ip(const void* value, size_t size) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendData::mutable_ip() {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string(*_default_ip_);
  }
  return ip_;
}
inline ::std::string* FriendData::release_ip() {
  clear_has_ip();
  if (ip_ == _default_ip_) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(_default_ip_);
    return temp;
  }
}
inline void FriendData::set_allocated_ip(::std::string* ip) {
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(_default_ip_);
  }
}

// optional bytes date = 3 [default = "NONE"];
inline bool FriendData::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendData::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendData::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendData::clear_date() {
  if (date_ != _default_date_) {
    date_->assign(*_default_date_);
  }
  clear_has_date();
}
inline const ::std::string& FriendData::date() const {
  return *date_;
}
inline void FriendData::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == _default_date_) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void FriendData::set_date(const char* value) {
  set_has_date();
  if (date_ == _default_date_) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void FriendData::set_date(const void* value, size_t size) {
  set_has_date();
  if (date_ == _default_date_) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendData::mutable_date() {
  set_has_date();
  if (date_ == _default_date_) {
    date_ = new ::std::string(*_default_date_);
  }
  return date_;
}
inline ::std::string* FriendData::release_date() {
  clear_has_date();
  if (date_ == _default_date_) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(_default_date_);
    return temp;
  }
}
inline void FriendData::set_allocated_date(::std::string* date) {
  if (date_ != _default_date_) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(_default_date_);
  }
}

// required bytes key = 4;
inline bool FriendData::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendData::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendData::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendData::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& FriendData::key() const {
  return *key_;
}
inline void FriendData::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FriendData::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void FriendData::set_key(const void* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FriendData::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* FriendData::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FriendData::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .navi.FriendList commonFriends = 5;
inline int FriendData::commonfriends_size() const {
  return commonfriends_.size();
}
inline void FriendData::clear_commonfriends() {
  commonfriends_.Clear();
}
inline const ::navi::FriendList& FriendData::commonfriends(int index) const {
  return commonfriends_.Get(index);
}
inline ::navi::FriendList* FriendData::mutable_commonfriends(int index) {
  return commonfriends_.Mutable(index);
}
inline ::navi::FriendList* FriendData::add_commonfriends() {
  return commonfriends_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::navi::FriendList >&
FriendData::commonfriends() const {
  return commonfriends_;
}
inline ::google::protobuf::RepeatedPtrField< ::navi::FriendList >*
FriendData::mutable_commonfriends() {
  return &commonfriends_;
}

// -------------------------------------------------------------------

// Friend

// required string uname = 5;
inline bool Friend::has_uname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Friend::set_has_uname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Friend::clear_has_uname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Friend::clear_uname() {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& Friend::uname() const {
  return *uname_;
}
inline void Friend::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void Friend::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
}
inline void Friend::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    uname_ = new ::std::string;
  }
  return uname_;
}
inline ::std::string* Friend::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::kEmptyString) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string server = 8;
inline bool Friend::has_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Friend::set_has_server() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Friend::clear_has_server() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Friend::clear_server() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    server_->clear();
  }
  clear_has_server();
}
inline const ::std::string& Friend::server() const {
  return *server_;
}
inline void Friend::set_server(const ::std::string& value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void Friend::set_server(const char* value) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(value);
}
inline void Friend::set_server(const char* value, size_t size) {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_server() {
  set_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    server_ = new ::std::string;
  }
  return server_;
}
inline ::std::string* Friend::release_server() {
  clear_has_server();
  if (server_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_;
    server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend::set_allocated_server(::std::string* server) {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (server) {
    set_has_server();
    server_ = server;
  } else {
    clear_has_server();
    server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string identifier = 6 [default = ""];
inline bool Friend::has_identifier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Friend::set_has_identifier() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Friend::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Friend::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& Friend::identifier() const {
  return *identifier_;
}
inline void Friend::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void Friend::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void Friend::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* Friend::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend::set_allocated_identifier(::std::string* identifier) {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (identifier) {
    set_has_identifier();
    identifier_ = identifier;
  } else {
    clear_has_identifier();
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string avatar = 7 [default = ""];
inline bool Friend::has_avatar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Friend::set_has_avatar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Friend::clear_has_avatar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Friend::clear_avatar() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    avatar_->clear();
  }
  clear_has_avatar();
}
inline const ::std::string& Friend::avatar() const {
  return *avatar_;
}
inline void Friend::set_avatar(const ::std::string& value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Friend::set_avatar(const char* value) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(value);
}
inline void Friend::set_avatar(const char* value, size_t size) {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  avatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_avatar() {
  set_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    avatar_ = new ::std::string;
  }
  return avatar_;
}
inline ::std::string* Friend::release_avatar() {
  clear_has_avatar();
  if (avatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_;
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend::set_allocated_avatar(::std::string* avatar) {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (avatar) {
    set_has_avatar();
    avatar_ = avatar;
  } else {
    clear_has_avatar();
    avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 1 [default = 0];
inline bool Friend::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Friend::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Friend::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Friend::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Friend::port() const {
  return port_;
}
inline void Friend::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional string ip = 2 [default = "NONE"];
inline bool Friend::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Friend::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Friend::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Friend::clear_ip() {
  if (ip_ != _default_ip_) {
    ip_->assign(*_default_ip_);
  }
  clear_has_ip();
}
inline const ::std::string& Friend::ip() const {
  return *ip_;
}
inline void Friend::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Friend::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Friend::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_ip() {
  set_has_ip();
  if (ip_ == _default_ip_) {
    ip_ = new ::std::string(*_default_ip_);
  }
  return ip_;
}
inline ::std::string* Friend::release_ip() {
  clear_has_ip();
  if (ip_ == _default_ip_) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(_default_ip_);
    return temp;
  }
}
inline void Friend::set_allocated_ip(::std::string* ip) {
  if (ip_ != _default_ip_) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(_default_ip_);
  }
}

// required string key = 4;
inline bool Friend::has_key() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Friend::set_has_key() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Friend::clear_has_key() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Friend::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Friend::key() const {
  return *key_;
}
inline void Friend::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Friend::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Friend::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Friend::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Friend::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Friend::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FriendList

// repeated .navi.FriendData friend = 1;
inline int FriendList::friend__size() const {
  return friend__.size();
}
inline void FriendList::clear_friend_() {
  friend__.Clear();
}
inline const ::navi::FriendData& FriendList::friend_(int index) const {
  return friend__.Get(index);
}
inline ::navi::FriendData* FriendList::mutable_friend_(int index) {
  return friend__.Mutable(index);
}
inline ::navi::FriendData* FriendList::add_friend_() {
  return friend__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::navi::FriendData >&
FriendList::friend_() const {
  return friend__;
}
inline ::google::protobuf::RepeatedPtrField< ::navi::FriendData >*
FriendList::mutable_friend_() {
  return &friend__;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace navi

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_local_2eproto__INCLUDED
