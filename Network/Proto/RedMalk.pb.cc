// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RedMalk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RedMalk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rm {

namespace {

const ::google::protobuf::Descriptor* VersionPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notice_reflection_ = NULL;
const ::google::protobuf::Descriptor* News_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  News_reflection_ = NULL;
const ::google::protobuf::Descriptor* Auth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Auth_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonalNew_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonalNew_reflection_ = NULL;
const ::google::protobuf::Descriptor* PersonalNews_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PersonalNews_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDataBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDataBlock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RedMalk_2eproto() {
  protobuf_AddDesc_RedMalk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RedMalk.proto");
  GOOGLE_CHECK(file != NULL);
  VersionPackage_descriptor_ = file->message_type(0);
  static const int VersionPackage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionPackage, system_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionPackage, concreteversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionPackage, so_),
  };
  VersionPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionPackage_descriptor_,
      VersionPackage::default_instance_,
      VersionPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionPackage));
  Notice_descriptor_ = file->message_type(1);
  static const int Notice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, relevance_),
  };
  Notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Notice_descriptor_,
      Notice::default_instance_,
      Notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Notice));
  News_descriptor_ = file->message_type(2);
  static const int News_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(News, notice_),
  };
  News_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      News_descriptor_,
      News::default_instance_,
      News_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(News, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(News, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(News));
  Auth_descriptor_ = file->message_type(3);
  static const int Auth_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, port_),
  };
  Auth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Auth_descriptor_,
      Auth::default_instance_,
      Auth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Auth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Auth));
  PersonalNew_descriptor_ = file->message_type(4);
  static const int PersonalNew_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalNew, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalNew, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalNew, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalNew, relevance_),
  };
  PersonalNew_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonalNew_descriptor_,
      PersonalNew::default_instance_,
      PersonalNew_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalNew, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalNew, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonalNew));
  PersonalNews_descriptor_ = file->message_type(5);
  static const int PersonalNews_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalNews, personalnew_),
  };
  PersonalNews_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PersonalNews_descriptor_,
      PersonalNews::default_instance_,
      PersonalNews_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalNews, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonalNews, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PersonalNews));
  UserData_descriptor_ = file->message_type(6);
  static const int UserData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, code_),
  };
  UserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserData_descriptor_,
      UserData::default_instance_,
      UserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserData));
  UserDataBlock_descriptor_ = file->message_type(7);
  static const int UserDataBlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataBlock, friend__),
  };
  UserDataBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDataBlock_descriptor_,
      UserDataBlock::default_instance_,
      UserDataBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDataBlock));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RedMalk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionPackage_descriptor_, &VersionPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Notice_descriptor_, &Notice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    News_descriptor_, &News::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Auth_descriptor_, &Auth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonalNew_descriptor_, &PersonalNew::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PersonalNews_descriptor_, &PersonalNews::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserData_descriptor_, &UserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDataBlock_descriptor_, &UserDataBlock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RedMalk_2eproto() {
  delete VersionPackage::default_instance_;
  delete VersionPackage_reflection_;
  delete Notice::default_instance_;
  delete Notice_reflection_;
  delete News::default_instance_;
  delete News_reflection_;
  delete Auth::default_instance_;
  delete Auth_reflection_;
  delete PersonalNew::default_instance_;
  delete PersonalNew_reflection_;
  delete PersonalNews::default_instance_;
  delete PersonalNews_reflection_;
  delete UserData::default_instance_;
  delete UserData_reflection_;
  delete UserData::_default_code_;
  delete UserDataBlock::default_instance_;
  delete UserDataBlock_reflection_;
}

void protobuf_AddDesc_RedMalk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rRedMalk.proto\022\002rm\"E\n\016VersionPackage\022\016\n"
    "\006system\030\001 \002(\014\022\027\n\017concreteVersion\030\002 \002(\014\022\n"
    "\n\002SO\030\003 \002(\014\":\n\006Notice\022\017\n\007content\030\001 \002(\t\022\014\n"
    "\004type\030\002 \002(\t\022\021\n\trelevance\030\003 \002(\t\"\"\n\004News\022\032"
    "\n\006notice\030\001 \003(\0132\n.rm.Notice\"4\n\004Auth\022\014\n\004us"
    "er\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\014\n\004port\030\003 \002(\005"
    "\"M\n\013PersonalNew\022\017\n\007content\030\001 \002(\t\022\014\n\004user"
    "\030\004 \002(\t\022\014\n\004type\030\002 \002(\t\022\021\n\trelevance\030\003 \002(\t\""
    "4\n\014PersonalNews\022$\n\013personalNew\030\001 \003(\0132\017.r"
    "m.PersonalNew\"F\n\010UserData\022\014\n\004user\030\001 \002(\t\022"
    "\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\022\022\n\004code\030\004 \001(\t:"
    "\004NONE\"-\n\rUserDataBlock\022\034\n\006friend\030\001 \003(\0132\014"
    ".rm.UserData", 492);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RedMalk.proto", &protobuf_RegisterTypes);
  VersionPackage::default_instance_ = new VersionPackage();
  Notice::default_instance_ = new Notice();
  News::default_instance_ = new News();
  Auth::default_instance_ = new Auth();
  PersonalNew::default_instance_ = new PersonalNew();
  PersonalNews::default_instance_ = new PersonalNews();
  UserData::_default_code_ =
      new ::std::string("NONE", 4);
  UserData::default_instance_ = new UserData();
  UserDataBlock::default_instance_ = new UserDataBlock();
  VersionPackage::default_instance_->InitAsDefaultInstance();
  Notice::default_instance_->InitAsDefaultInstance();
  News::default_instance_->InitAsDefaultInstance();
  Auth::default_instance_->InitAsDefaultInstance();
  PersonalNew::default_instance_->InitAsDefaultInstance();
  PersonalNews::default_instance_->InitAsDefaultInstance();
  UserData::default_instance_->InitAsDefaultInstance();
  UserDataBlock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RedMalk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RedMalk_2eproto {
  StaticDescriptorInitializer_RedMalk_2eproto() {
    protobuf_AddDesc_RedMalk_2eproto();
  }
} static_descriptor_initializer_RedMalk_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VersionPackage::kSystemFieldNumber;
const int VersionPackage::kConcreteVersionFieldNumber;
const int VersionPackage::kSOFieldNumber;
#endif  // !_MSC_VER

VersionPackage::VersionPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VersionPackage::InitAsDefaultInstance() {
}

VersionPackage::VersionPackage(const VersionPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VersionPackage::SharedCtor() {
  _cached_size_ = 0;
  system_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  concreteversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  so_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionPackage::~VersionPackage() {
  SharedDtor();
}

void VersionPackage::SharedDtor() {
  if (system_ != &::google::protobuf::internal::kEmptyString) {
    delete system_;
  }
  if (concreteversion_ != &::google::protobuf::internal::kEmptyString) {
    delete concreteversion_;
  }
  if (so_ != &::google::protobuf::internal::kEmptyString) {
    delete so_;
  }
  if (this != default_instance_) {
  }
}

void VersionPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionPackage_descriptor_;
}

const VersionPackage& VersionPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedMalk_2eproto();
  return *default_instance_;
}

VersionPackage* VersionPackage::default_instance_ = NULL;

VersionPackage* VersionPackage::New() const {
  return new VersionPackage;
}

void VersionPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_system()) {
      if (system_ != &::google::protobuf::internal::kEmptyString) {
        system_->clear();
      }
    }
    if (has_concreteversion()) {
      if (concreteversion_ != &::google::protobuf::internal::kEmptyString) {
        concreteversion_->clear();
      }
    }
    if (has_so()) {
      if (so_ != &::google::protobuf::internal::kEmptyString) {
        so_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes system = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_system()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_concreteVersion;
        break;
      }

      // required bytes concreteVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_concreteVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_concreteversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SO;
        break;
      }

      // required bytes SO = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_so()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VersionPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes system = 1;
  if (has_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->system(), output);
  }

  // required bytes concreteVersion = 2;
  if (has_concreteversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->concreteversion(), output);
  }

  // required bytes SO = 3;
  if (has_so()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->so(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VersionPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes system = 1;
  if (has_system()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->system(), target);
  }

  // required bytes concreteVersion = 2;
  if (has_concreteversion()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->concreteversion(), target);
  }

  // required bytes SO = 3;
  if (has_so()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->so(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VersionPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes system = 1;
    if (has_system()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->system());
    }

    // required bytes concreteVersion = 2;
    if (has_concreteversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->concreteversion());
    }

    // required bytes SO = 3;
    if (has_so()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->so());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionPackage::MergeFrom(const VersionPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system()) {
      set_system(from.system());
    }
    if (from.has_concreteversion()) {
      set_concreteversion(from.concreteversion());
    }
    if (from.has_so()) {
      set_so(from.so());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionPackage::CopyFrom(const VersionPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VersionPackage::Swap(VersionPackage* other) {
  if (other != this) {
    std::swap(system_, other->system_);
    std::swap(concreteversion_, other->concreteversion_);
    std::swap(so_, other->so_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionPackage_descriptor_;
  metadata.reflection = VersionPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Notice::kContentFieldNumber;
const int Notice::kTypeFieldNumber;
const int Notice::kRelevanceFieldNumber;
#endif  // !_MSC_VER

Notice::Notice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Notice::InitAsDefaultInstance() {
}

Notice::Notice(const Notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Notice::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relevance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notice::~Notice() {
  SharedDtor();
}

void Notice::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (relevance_ != &::google::protobuf::internal::kEmptyString) {
    delete relevance_;
  }
  if (this != default_instance_) {
  }
}

void Notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notice_descriptor_;
}

const Notice& Notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedMalk_2eproto();
  return *default_instance_;
}

Notice* Notice::default_instance_ = NULL;

Notice* Notice::New() const {
  return new Notice;
}

void Notice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_relevance()) {
      if (relevance_ != &::google::protobuf::internal::kEmptyString) {
        relevance_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_relevance;
        break;
      }

      // required string relevance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relevance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relevance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relevance().data(), this->relevance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required string relevance = 3;
  if (has_relevance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relevance().data(), this->relevance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->relevance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string relevance = 3;
  if (has_relevance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relevance().data(), this->relevance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->relevance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Notice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string relevance = 3;
    if (has_relevance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relevance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Notice::MergeFrom(const Notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_relevance()) {
      set_relevance(from.relevance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notice::CopyFrom(const Notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Notice::Swap(Notice* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(relevance_, other->relevance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notice_descriptor_;
  metadata.reflection = Notice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int News::kNoticeFieldNumber;
#endif  // !_MSC_VER

News::News()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void News::InitAsDefaultInstance() {
}

News::News(const News& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void News::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

News::~News() {
  SharedDtor();
}

void News::SharedDtor() {
  if (this != default_instance_) {
  }
}

void News::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* News::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return News_descriptor_;
}

const News& News::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedMalk_2eproto();
  return *default_instance_;
}

News* News::default_instance_ = NULL;

News* News::New() const {
  return new News;
}

void News::Clear() {
  notice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool News::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rm.Notice notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notice;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void News::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rm.Notice notice = 1;
  for (int i = 0; i < this->notice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notice(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* News::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rm.Notice notice = 1;
  for (int i = 0; i < this->notice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notice(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int News::ByteSize() const {
  int total_size = 0;

  // repeated .rm.Notice notice = 1;
  total_size += 1 * this->notice_size();
  for (int i = 0; i < this->notice_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notice(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void News::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const News* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const News*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void News::MergeFrom(const News& from) {
  GOOGLE_CHECK_NE(&from, this);
  notice_.MergeFrom(from.notice_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void News::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void News::CopyFrom(const News& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool News::IsInitialized() const {

  for (int i = 0; i < notice_size(); i++) {
    if (!this->notice(i).IsInitialized()) return false;
  }
  return true;
}

void News::Swap(News* other) {
  if (other != this) {
    notice_.Swap(&other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata News::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = News_descriptor_;
  metadata.reflection = News_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Auth::kUserFieldNumber;
const int Auth::kPasswordFieldNumber;
const int Auth::kPortFieldNumber;
#endif  // !_MSC_VER

Auth::Auth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Auth::InitAsDefaultInstance() {
}

Auth::Auth(const Auth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Auth::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Auth::~Auth() {
  SharedDtor();
}

void Auth::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Auth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Auth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Auth_descriptor_;
}

const Auth& Auth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedMalk_2eproto();
  return *default_instance_;
}

Auth* Auth::default_instance_ = NULL;

Auth* Auth::New() const {
  return new Auth;
}

void Auth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Auth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Auth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Auth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Auth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Auth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Auth::MergeFrom(const Auth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Auth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auth::CopyFrom(const Auth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Auth::Swap(Auth* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(password_, other->password_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Auth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Auth_descriptor_;
  metadata.reflection = Auth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonalNew::kContentFieldNumber;
const int PersonalNew::kUserFieldNumber;
const int PersonalNew::kTypeFieldNumber;
const int PersonalNew::kRelevanceFieldNumber;
#endif  // !_MSC_VER

PersonalNew::PersonalNew()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PersonalNew::InitAsDefaultInstance() {
}

PersonalNew::PersonalNew(const PersonalNew& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PersonalNew::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relevance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonalNew::~PersonalNew() {
  SharedDtor();
}

void PersonalNew::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (relevance_ != &::google::protobuf::internal::kEmptyString) {
    delete relevance_;
  }
  if (this != default_instance_) {
  }
}

void PersonalNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonalNew::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonalNew_descriptor_;
}

const PersonalNew& PersonalNew::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedMalk_2eproto();
  return *default_instance_;
}

PersonalNew* PersonalNew::default_instance_ = NULL;

PersonalNew* PersonalNew::New() const {
  return new PersonalNew;
}

void PersonalNew::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_relevance()) {
      if (relevance_ != &::google::protobuf::internal::kEmptyString) {
        relevance_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonalNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_relevance;
        break;
      }

      // required string relevance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relevance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relevance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relevance().data(), this->relevance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PersonalNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // required string relevance = 3;
  if (has_relevance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relevance().data(), this->relevance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->relevance(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PersonalNew::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string relevance = 3;
  if (has_relevance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relevance().data(), this->relevance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->relevance(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PersonalNew::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string relevance = 3;
    if (has_relevance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relevance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonalNew::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonalNew* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonalNew*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonalNew::MergeFrom(const PersonalNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_relevance()) {
      set_relevance(from.relevance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonalNew::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonalNew::CopyFrom(const PersonalNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonalNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PersonalNew::Swap(PersonalNew* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(user_, other->user_);
    std::swap(type_, other->type_);
    std::swap(relevance_, other->relevance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonalNew::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonalNew_descriptor_;
  metadata.reflection = PersonalNew_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonalNews::kPersonalNewFieldNumber;
#endif  // !_MSC_VER

PersonalNews::PersonalNews()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PersonalNews::InitAsDefaultInstance() {
}

PersonalNews::PersonalNews(const PersonalNews& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PersonalNews::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonalNews::~PersonalNews() {
  SharedDtor();
}

void PersonalNews::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PersonalNews::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PersonalNews::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonalNews_descriptor_;
}

const PersonalNews& PersonalNews::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedMalk_2eproto();
  return *default_instance_;
}

PersonalNews* PersonalNews::default_instance_ = NULL;

PersonalNews* PersonalNews::New() const {
  return new PersonalNews;
}

void PersonalNews::Clear() {
  personalnew_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonalNews::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rm.PersonalNew personalNew = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_personalNew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_personalnew()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_personalNew;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PersonalNews::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rm.PersonalNew personalNew = 1;
  for (int i = 0; i < this->personalnew_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->personalnew(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PersonalNews::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rm.PersonalNew personalNew = 1;
  for (int i = 0; i < this->personalnew_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->personalnew(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PersonalNews::ByteSize() const {
  int total_size = 0;

  // repeated .rm.PersonalNew personalNew = 1;
  total_size += 1 * this->personalnew_size();
  for (int i = 0; i < this->personalnew_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->personalnew(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonalNews::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonalNews* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PersonalNews*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonalNews::MergeFrom(const PersonalNews& from) {
  GOOGLE_CHECK_NE(&from, this);
  personalnew_.MergeFrom(from.personalnew_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonalNews::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PersonalNews::CopyFrom(const PersonalNews& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonalNews::IsInitialized() const {

  for (int i = 0; i < personalnew_size(); i++) {
    if (!this->personalnew(i).IsInitialized()) return false;
  }
  return true;
}

void PersonalNews::Swap(PersonalNews* other) {
  if (other != this) {
    personalnew_.Swap(&other->personalnew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonalNews::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonalNews_descriptor_;
  metadata.reflection = PersonalNews_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UserData::_default_code_ = NULL;
#ifndef _MSC_VER
const int UserData::kUserFieldNumber;
const int UserData::kIpFieldNumber;
const int UserData::kPortFieldNumber;
const int UserData::kCodeFieldNumber;
#endif  // !_MSC_VER

UserData::UserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserData::InitAsDefaultInstance() {
}

UserData::UserData(const UserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserData::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  code_ = const_cast< ::std::string*>(_default_code_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserData::~UserData() {
  SharedDtor();
}

void UserData::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (code_ != _default_code_) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void UserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserData_descriptor_;
}

const UserData& UserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedMalk_2eproto();
  return *default_instance_;
}

UserData* UserData::default_instance_ = NULL;

UserData* UserData::New() const {
  return new UserData;
}

void UserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    if (has_code()) {
      if (code_ != _default_code_) {
        code_->assign(*_default_code_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code;
        break;
      }

      // optional string code = 4 [default = "NONE"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string code = 4 [default = "NONE"];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string code = 4 [default = "NONE"];
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string code = 4 [default = "NONE"];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserData::MergeFrom(const UserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData::CopyFrom(const UserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserData::Swap(UserData* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserData_descriptor_;
  metadata.reflection = UserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDataBlock::kFriendFieldNumber;
#endif  // !_MSC_VER

UserDataBlock::UserDataBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDataBlock::InitAsDefaultInstance() {
}

UserDataBlock::UserDataBlock(const UserDataBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDataBlock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDataBlock::~UserDataBlock() {
  SharedDtor();
}

void UserDataBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDataBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDataBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDataBlock_descriptor_;
}

const UserDataBlock& UserDataBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedMalk_2eproto();
  return *default_instance_;
}

UserDataBlock* UserDataBlock::default_instance_ = NULL;

UserDataBlock* UserDataBlock::New() const {
  return new UserDataBlock;
}

void UserDataBlock::Clear() {
  friend__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rm.UserData friend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friend;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .rm.UserData friend = 1;
  for (int i = 0; i < this->friend__size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDataBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .rm.UserData friend = 1;
  for (int i = 0; i < this->friend__size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDataBlock::ByteSize() const {
  int total_size = 0;

  // repeated .rm.UserData friend = 1;
  total_size += 1 * this->friend__size();
  for (int i = 0; i < this->friend__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDataBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDataBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDataBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDataBlock::MergeFrom(const UserDataBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend__.MergeFrom(from.friend__);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDataBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDataBlock::CopyFrom(const UserDataBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDataBlock::IsInitialized() const {

  for (int i = 0; i < friend__size(); i++) {
    if (!this->friend_(i).IsInitialized()) return false;
  }
  return true;
}

void UserDataBlock::Swap(UserDataBlock* other) {
  if (other != this) {
    friend__.Swap(&other->friend__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDataBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDataBlock_descriptor_;
  metadata.reflection = UserDataBlock_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rm

// @@protoc_insertion_point(global_scope)
