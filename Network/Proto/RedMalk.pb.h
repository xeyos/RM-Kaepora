// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RedMalk.proto

#ifndef PROTOBUF_RedMalk_2eproto__INCLUDED
#define PROTOBUF_RedMalk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RedMalk_2eproto();
void protobuf_AssignDesc_RedMalk_2eproto();
void protobuf_ShutdownFile_RedMalk_2eproto();

class VersionPackage;
class Notice;
class News;
class Auth;
class PersonalNew;
class PersonalNews;
class UserData;
class UserDataBlock;

// ===================================================================

class VersionPackage : public ::google::protobuf::Message {
 public:
  VersionPackage();
  virtual ~VersionPackage();

  VersionPackage(const VersionPackage& from);

  inline VersionPackage& operator=(const VersionPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionPackage& default_instance();

  void Swap(VersionPackage* other);

  // implements Message ----------------------------------------------

  VersionPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VersionPackage& from);
  void MergeFrom(const VersionPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes system = 1;
  inline bool has_system() const;
  inline void clear_system();
  static const int kSystemFieldNumber = 1;
  inline const ::std::string& system() const;
  inline void set_system(const ::std::string& value);
  inline void set_system(const char* value);
  inline void set_system(const void* value, size_t size);
  inline ::std::string* mutable_system();
  inline ::std::string* release_system();
  inline void set_allocated_system(::std::string* system);

  // required bytes concreteVersion = 2;
  inline bool has_concreteversion() const;
  inline void clear_concreteversion();
  static const int kConcreteVersionFieldNumber = 2;
  inline const ::std::string& concreteversion() const;
  inline void set_concreteversion(const ::std::string& value);
  inline void set_concreteversion(const char* value);
  inline void set_concreteversion(const void* value, size_t size);
  inline ::std::string* mutable_concreteversion();
  inline ::std::string* release_concreteversion();
  inline void set_allocated_concreteversion(::std::string* concreteversion);

  // required bytes SO = 3;
  inline bool has_so() const;
  inline void clear_so();
  static const int kSOFieldNumber = 3;
  inline const ::std::string& so() const;
  inline void set_so(const ::std::string& value);
  inline void set_so(const char* value);
  inline void set_so(const void* value, size_t size);
  inline ::std::string* mutable_so();
  inline ::std::string* release_so();
  inline void set_allocated_so(::std::string* so);

  // @@protoc_insertion_point(class_scope:rm.VersionPackage)
 private:
  inline void set_has_system();
  inline void clear_has_system();
  inline void set_has_concreteversion();
  inline void clear_has_concreteversion();
  inline void set_has_so();
  inline void clear_has_so();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* system_;
  ::std::string* concreteversion_;
  ::std::string* so_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RedMalk_2eproto();
  friend void protobuf_AssignDesc_RedMalk_2eproto();
  friend void protobuf_ShutdownFile_RedMalk_2eproto();

  void InitAsDefaultInstance();
  static VersionPackage* default_instance_;
};
// -------------------------------------------------------------------

class Notice : public ::google::protobuf::Message {
 public:
  Notice();
  virtual ~Notice();

  Notice(const Notice& from);

  inline Notice& operator=(const Notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notice& default_instance();

  void Swap(Notice* other);

  // implements Message ----------------------------------------------

  Notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notice& from);
  void MergeFrom(const Notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string relevance = 3;
  inline bool has_relevance() const;
  inline void clear_relevance();
  static const int kRelevanceFieldNumber = 3;
  inline const ::std::string& relevance() const;
  inline void set_relevance(const ::std::string& value);
  inline void set_relevance(const char* value);
  inline void set_relevance(const char* value, size_t size);
  inline ::std::string* mutable_relevance();
  inline ::std::string* release_relevance();
  inline void set_allocated_relevance(::std::string* relevance);

  // @@protoc_insertion_point(class_scope:rm.Notice)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_relevance();
  inline void clear_has_relevance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::std::string* type_;
  ::std::string* relevance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RedMalk_2eproto();
  friend void protobuf_AssignDesc_RedMalk_2eproto();
  friend void protobuf_ShutdownFile_RedMalk_2eproto();

  void InitAsDefaultInstance();
  static Notice* default_instance_;
};
// -------------------------------------------------------------------

class News : public ::google::protobuf::Message {
 public:
  News();
  virtual ~News();

  News(const News& from);

  inline News& operator=(const News& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const News& default_instance();

  void Swap(News* other);

  // implements Message ----------------------------------------------

  News* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const News& from);
  void MergeFrom(const News& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rm.Notice notice = 1;
  inline int notice_size() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 1;
  inline const ::rm::Notice& notice(int index) const;
  inline ::rm::Notice* mutable_notice(int index);
  inline ::rm::Notice* add_notice();
  inline const ::google::protobuf::RepeatedPtrField< ::rm::Notice >&
      notice() const;
  inline ::google::protobuf::RepeatedPtrField< ::rm::Notice >*
      mutable_notice();

  // @@protoc_insertion_point(class_scope:rm.News)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rm::Notice > notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RedMalk_2eproto();
  friend void protobuf_AssignDesc_RedMalk_2eproto();
  friend void protobuf_ShutdownFile_RedMalk_2eproto();

  void InitAsDefaultInstance();
  static News* default_instance_;
};
// -------------------------------------------------------------------

class Auth : public ::google::protobuf::Message {
 public:
  Auth();
  virtual ~Auth();

  Auth(const Auth& from);

  inline Auth& operator=(const Auth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Auth& default_instance();

  void Swap(Auth* other);

  // implements Message ----------------------------------------------

  Auth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Auth& from);
  void MergeFrom(const Auth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rm.Auth)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* password_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_RedMalk_2eproto();
  friend void protobuf_AssignDesc_RedMalk_2eproto();
  friend void protobuf_ShutdownFile_RedMalk_2eproto();

  void InitAsDefaultInstance();
  static Auth* default_instance_;
};
// -------------------------------------------------------------------

class PersonalNew : public ::google::protobuf::Message {
 public:
  PersonalNew();
  virtual ~PersonalNew();

  PersonalNew(const PersonalNew& from);

  inline PersonalNew& operator=(const PersonalNew& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonalNew& default_instance();

  void Swap(PersonalNew* other);

  // implements Message ----------------------------------------------

  PersonalNew* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonalNew& from);
  void MergeFrom(const PersonalNew& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required string relevance = 3;
  inline bool has_relevance() const;
  inline void clear_relevance();
  static const int kRelevanceFieldNumber = 3;
  inline const ::std::string& relevance() const;
  inline void set_relevance(const ::std::string& value);
  inline void set_relevance(const char* value);
  inline void set_relevance(const char* value, size_t size);
  inline ::std::string* mutable_relevance();
  inline ::std::string* release_relevance();
  inline void set_allocated_relevance(::std::string* relevance);

  // @@protoc_insertion_point(class_scope:rm.PersonalNew)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_relevance();
  inline void clear_has_relevance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::std::string* user_;
  ::std::string* type_;
  ::std::string* relevance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RedMalk_2eproto();
  friend void protobuf_AssignDesc_RedMalk_2eproto();
  friend void protobuf_ShutdownFile_RedMalk_2eproto();

  void InitAsDefaultInstance();
  static PersonalNew* default_instance_;
};
// -------------------------------------------------------------------

class PersonalNews : public ::google::protobuf::Message {
 public:
  PersonalNews();
  virtual ~PersonalNews();

  PersonalNews(const PersonalNews& from);

  inline PersonalNews& operator=(const PersonalNews& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PersonalNews& default_instance();

  void Swap(PersonalNews* other);

  // implements Message ----------------------------------------------

  PersonalNews* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PersonalNews& from);
  void MergeFrom(const PersonalNews& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rm.PersonalNew personalNew = 1;
  inline int personalnew_size() const;
  inline void clear_personalnew();
  static const int kPersonalNewFieldNumber = 1;
  inline const ::rm::PersonalNew& personalnew(int index) const;
  inline ::rm::PersonalNew* mutable_personalnew(int index);
  inline ::rm::PersonalNew* add_personalnew();
  inline const ::google::protobuf::RepeatedPtrField< ::rm::PersonalNew >&
      personalnew() const;
  inline ::google::protobuf::RepeatedPtrField< ::rm::PersonalNew >*
      mutable_personalnew();

  // @@protoc_insertion_point(class_scope:rm.PersonalNews)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rm::PersonalNew > personalnew_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RedMalk_2eproto();
  friend void protobuf_AssignDesc_RedMalk_2eproto();
  friend void protobuf_ShutdownFile_RedMalk_2eproto();

  void InitAsDefaultInstance();
  static PersonalNews* default_instance_;
};
// -------------------------------------------------------------------

class UserData : public ::google::protobuf::Message {
 public:
  UserData();
  virtual ~UserData();

  UserData(const UserData& from);

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData& default_instance();

  void Swap(UserData* other);

  // implements Message ----------------------------------------------

  UserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string code = 4 [default = "NONE"];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:rm.UserData)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* ip_;
  ::std::string* code_;
  static ::std::string* _default_code_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_RedMalk_2eproto();
  friend void protobuf_AssignDesc_RedMalk_2eproto();
  friend void protobuf_ShutdownFile_RedMalk_2eproto();

  void InitAsDefaultInstance();
  static UserData* default_instance_;
};
// -------------------------------------------------------------------

class UserDataBlock : public ::google::protobuf::Message {
 public:
  UserDataBlock();
  virtual ~UserDataBlock();

  UserDataBlock(const UserDataBlock& from);

  inline UserDataBlock& operator=(const UserDataBlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDataBlock& default_instance();

  void Swap(UserDataBlock* other);

  // implements Message ----------------------------------------------

  UserDataBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserDataBlock& from);
  void MergeFrom(const UserDataBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rm.UserData friend = 1;
  inline int friend__size() const;
  inline void clear_friend_();
  static const int kFriendFieldNumber = 1;
  inline const ::rm::UserData& friend_(int index) const;
  inline ::rm::UserData* mutable_friend_(int index);
  inline ::rm::UserData* add_friend_();
  inline const ::google::protobuf::RepeatedPtrField< ::rm::UserData >&
      friend_() const;
  inline ::google::protobuf::RepeatedPtrField< ::rm::UserData >*
      mutable_friend_();

  // @@protoc_insertion_point(class_scope:rm.UserDataBlock)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::rm::UserData > friend__;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RedMalk_2eproto();
  friend void protobuf_AssignDesc_RedMalk_2eproto();
  friend void protobuf_ShutdownFile_RedMalk_2eproto();

  void InitAsDefaultInstance();
  static UserDataBlock* default_instance_;
};
// ===================================================================


// ===================================================================

// VersionPackage

// required bytes system = 1;
inline bool VersionPackage::has_system() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionPackage::set_has_system() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionPackage::clear_has_system() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionPackage::clear_system() {
  if (system_ != &::google::protobuf::internal::kEmptyString) {
    system_->clear();
  }
  clear_has_system();
}
inline const ::std::string& VersionPackage::system() const {
  return *system_;
}
inline void VersionPackage::set_system(const ::std::string& value) {
  set_has_system();
  if (system_ == &::google::protobuf::internal::kEmptyString) {
    system_ = new ::std::string;
  }
  system_->assign(value);
}
inline void VersionPackage::set_system(const char* value) {
  set_has_system();
  if (system_ == &::google::protobuf::internal::kEmptyString) {
    system_ = new ::std::string;
  }
  system_->assign(value);
}
inline void VersionPackage::set_system(const void* value, size_t size) {
  set_has_system();
  if (system_ == &::google::protobuf::internal::kEmptyString) {
    system_ = new ::std::string;
  }
  system_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionPackage::mutable_system() {
  set_has_system();
  if (system_ == &::google::protobuf::internal::kEmptyString) {
    system_ = new ::std::string;
  }
  return system_;
}
inline ::std::string* VersionPackage::release_system() {
  clear_has_system();
  if (system_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = system_;
    system_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VersionPackage::set_allocated_system(::std::string* system) {
  if (system_ != &::google::protobuf::internal::kEmptyString) {
    delete system_;
  }
  if (system) {
    set_has_system();
    system_ = system;
  } else {
    clear_has_system();
    system_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes concreteVersion = 2;
inline bool VersionPackage::has_concreteversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionPackage::set_has_concreteversion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionPackage::clear_has_concreteversion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionPackage::clear_concreteversion() {
  if (concreteversion_ != &::google::protobuf::internal::kEmptyString) {
    concreteversion_->clear();
  }
  clear_has_concreteversion();
}
inline const ::std::string& VersionPackage::concreteversion() const {
  return *concreteversion_;
}
inline void VersionPackage::set_concreteversion(const ::std::string& value) {
  set_has_concreteversion();
  if (concreteversion_ == &::google::protobuf::internal::kEmptyString) {
    concreteversion_ = new ::std::string;
  }
  concreteversion_->assign(value);
}
inline void VersionPackage::set_concreteversion(const char* value) {
  set_has_concreteversion();
  if (concreteversion_ == &::google::protobuf::internal::kEmptyString) {
    concreteversion_ = new ::std::string;
  }
  concreteversion_->assign(value);
}
inline void VersionPackage::set_concreteversion(const void* value, size_t size) {
  set_has_concreteversion();
  if (concreteversion_ == &::google::protobuf::internal::kEmptyString) {
    concreteversion_ = new ::std::string;
  }
  concreteversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionPackage::mutable_concreteversion() {
  set_has_concreteversion();
  if (concreteversion_ == &::google::protobuf::internal::kEmptyString) {
    concreteversion_ = new ::std::string;
  }
  return concreteversion_;
}
inline ::std::string* VersionPackage::release_concreteversion() {
  clear_has_concreteversion();
  if (concreteversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = concreteversion_;
    concreteversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VersionPackage::set_allocated_concreteversion(::std::string* concreteversion) {
  if (concreteversion_ != &::google::protobuf::internal::kEmptyString) {
    delete concreteversion_;
  }
  if (concreteversion) {
    set_has_concreteversion();
    concreteversion_ = concreteversion;
  } else {
    clear_has_concreteversion();
    concreteversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes SO = 3;
inline bool VersionPackage::has_so() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VersionPackage::set_has_so() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VersionPackage::clear_has_so() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VersionPackage::clear_so() {
  if (so_ != &::google::protobuf::internal::kEmptyString) {
    so_->clear();
  }
  clear_has_so();
}
inline const ::std::string& VersionPackage::so() const {
  return *so_;
}
inline void VersionPackage::set_so(const ::std::string& value) {
  set_has_so();
  if (so_ == &::google::protobuf::internal::kEmptyString) {
    so_ = new ::std::string;
  }
  so_->assign(value);
}
inline void VersionPackage::set_so(const char* value) {
  set_has_so();
  if (so_ == &::google::protobuf::internal::kEmptyString) {
    so_ = new ::std::string;
  }
  so_->assign(value);
}
inline void VersionPackage::set_so(const void* value, size_t size) {
  set_has_so();
  if (so_ == &::google::protobuf::internal::kEmptyString) {
    so_ = new ::std::string;
  }
  so_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VersionPackage::mutable_so() {
  set_has_so();
  if (so_ == &::google::protobuf::internal::kEmptyString) {
    so_ = new ::std::string;
  }
  return so_;
}
inline ::std::string* VersionPackage::release_so() {
  clear_has_so();
  if (so_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = so_;
    so_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VersionPackage::set_allocated_so(::std::string* so) {
  if (so_ != &::google::protobuf::internal::kEmptyString) {
    delete so_;
  }
  if (so) {
    set_has_so();
    so_ = so;
  } else {
    clear_has_so();
    so_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Notice

// required string content = 1;
inline bool Notice::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notice::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notice::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notice::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Notice::content() const {
  return *content_;
}
inline void Notice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Notice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Notice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Notice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool Notice::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notice::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notice::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notice::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Notice::type() const {
  return *type_;
}
inline void Notice::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Notice::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Notice::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Notice::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string relevance = 3;
inline bool Notice::has_relevance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notice::set_has_relevance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notice::clear_has_relevance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notice::clear_relevance() {
  if (relevance_ != &::google::protobuf::internal::kEmptyString) {
    relevance_->clear();
  }
  clear_has_relevance();
}
inline const ::std::string& Notice::relevance() const {
  return *relevance_;
}
inline void Notice::set_relevance(const ::std::string& value) {
  set_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    relevance_ = new ::std::string;
  }
  relevance_->assign(value);
}
inline void Notice::set_relevance(const char* value) {
  set_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    relevance_ = new ::std::string;
  }
  relevance_->assign(value);
}
inline void Notice::set_relevance(const char* value, size_t size) {
  set_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    relevance_ = new ::std::string;
  }
  relevance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice::mutable_relevance() {
  set_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    relevance_ = new ::std::string;
  }
  return relevance_;
}
inline ::std::string* Notice::release_relevance() {
  clear_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relevance_;
    relevance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice::set_allocated_relevance(::std::string* relevance) {
  if (relevance_ != &::google::protobuf::internal::kEmptyString) {
    delete relevance_;
  }
  if (relevance) {
    set_has_relevance();
    relevance_ = relevance;
  } else {
    clear_has_relevance();
    relevance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// News

// repeated .rm.Notice notice = 1;
inline int News::notice_size() const {
  return notice_.size();
}
inline void News::clear_notice() {
  notice_.Clear();
}
inline const ::rm::Notice& News::notice(int index) const {
  return notice_.Get(index);
}
inline ::rm::Notice* News::mutable_notice(int index) {
  return notice_.Mutable(index);
}
inline ::rm::Notice* News::add_notice() {
  return notice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rm::Notice >&
News::notice() const {
  return notice_;
}
inline ::google::protobuf::RepeatedPtrField< ::rm::Notice >*
News::mutable_notice() {
  return &notice_;
}

// -------------------------------------------------------------------

// Auth

// required string user = 1;
inline bool Auth::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Auth::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Auth::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Auth::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& Auth::user() const {
  return *user_;
}
inline void Auth::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Auth::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Auth::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Auth::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* Auth::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Auth::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool Auth::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Auth::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Auth::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Auth::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Auth::password() const {
  return *password_;
}
inline void Auth::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Auth::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Auth::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Auth::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Auth::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Auth::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool Auth::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Auth::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Auth::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Auth::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Auth::port() const {
  return port_;
}
inline void Auth::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// PersonalNew

// required string content = 1;
inline bool PersonalNew::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PersonalNew::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PersonalNew::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PersonalNew::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& PersonalNew::content() const {
  return *content_;
}
inline void PersonalNew::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PersonalNew::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PersonalNew::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersonalNew::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* PersonalNew::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersonalNew::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string user = 4;
inline bool PersonalNew::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PersonalNew::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PersonalNew::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PersonalNew::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& PersonalNew::user() const {
  return *user_;
}
inline void PersonalNew::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void PersonalNew::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void PersonalNew::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersonalNew::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* PersonalNew::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersonalNew::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 2;
inline bool PersonalNew::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PersonalNew::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PersonalNew::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PersonalNew::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& PersonalNew::type() const {
  return *type_;
}
inline void PersonalNew::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PersonalNew::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PersonalNew::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersonalNew::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* PersonalNew::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersonalNew::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string relevance = 3;
inline bool PersonalNew::has_relevance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PersonalNew::set_has_relevance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PersonalNew::clear_has_relevance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PersonalNew::clear_relevance() {
  if (relevance_ != &::google::protobuf::internal::kEmptyString) {
    relevance_->clear();
  }
  clear_has_relevance();
}
inline const ::std::string& PersonalNew::relevance() const {
  return *relevance_;
}
inline void PersonalNew::set_relevance(const ::std::string& value) {
  set_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    relevance_ = new ::std::string;
  }
  relevance_->assign(value);
}
inline void PersonalNew::set_relevance(const char* value) {
  set_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    relevance_ = new ::std::string;
  }
  relevance_->assign(value);
}
inline void PersonalNew::set_relevance(const char* value, size_t size) {
  set_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    relevance_ = new ::std::string;
  }
  relevance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PersonalNew::mutable_relevance() {
  set_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    relevance_ = new ::std::string;
  }
  return relevance_;
}
inline ::std::string* PersonalNew::release_relevance() {
  clear_has_relevance();
  if (relevance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = relevance_;
    relevance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PersonalNew::set_allocated_relevance(::std::string* relevance) {
  if (relevance_ != &::google::protobuf::internal::kEmptyString) {
    delete relevance_;
  }
  if (relevance) {
    set_has_relevance();
    relevance_ = relevance;
  } else {
    clear_has_relevance();
    relevance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PersonalNews

// repeated .rm.PersonalNew personalNew = 1;
inline int PersonalNews::personalnew_size() const {
  return personalnew_.size();
}
inline void PersonalNews::clear_personalnew() {
  personalnew_.Clear();
}
inline const ::rm::PersonalNew& PersonalNews::personalnew(int index) const {
  return personalnew_.Get(index);
}
inline ::rm::PersonalNew* PersonalNews::mutable_personalnew(int index) {
  return personalnew_.Mutable(index);
}
inline ::rm::PersonalNew* PersonalNews::add_personalnew() {
  return personalnew_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rm::PersonalNew >&
PersonalNews::personalnew() const {
  return personalnew_;
}
inline ::google::protobuf::RepeatedPtrField< ::rm::PersonalNew >*
PersonalNews::mutable_personalnew() {
  return &personalnew_;
}

// -------------------------------------------------------------------

// UserData

// required string user = 1;
inline bool UserData::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserData::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserData::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserData::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& UserData::user() const {
  return *user_;
}
inline void UserData::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void UserData::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void UserData::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserData::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* UserData::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserData::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 2;
inline bool UserData::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserData::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserData::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UserData::ip() const {
  return *ip_;
}
inline void UserData::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void UserData::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void UserData::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserData::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* UserData::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserData::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool UserData::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserData::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserData::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserData::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 UserData::port() const {
  return port_;
}
inline void UserData::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional string code = 4 [default = "NONE"];
inline bool UserData::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserData::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserData::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserData::clear_code() {
  if (code_ != _default_code_) {
    code_->assign(*_default_code_);
  }
  clear_has_code();
}
inline const ::std::string& UserData::code() const {
  return *code_;
}
inline void UserData::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == _default_code_) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void UserData::set_code(const char* value) {
  set_has_code();
  if (code_ == _default_code_) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void UserData::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == _default_code_) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserData::mutable_code() {
  set_has_code();
  if (code_ == _default_code_) {
    code_ = new ::std::string(*_default_code_);
  }
  return code_;
}
inline ::std::string* UserData::release_code() {
  clear_has_code();
  if (code_ == _default_code_) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(_default_code_);
    return temp;
  }
}
inline void UserData::set_allocated_code(::std::string* code) {
  if (code_ != _default_code_) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(_default_code_);
  }
}

// -------------------------------------------------------------------

// UserDataBlock

// repeated .rm.UserData friend = 1;
inline int UserDataBlock::friend__size() const {
  return friend__.size();
}
inline void UserDataBlock::clear_friend_() {
  friend__.Clear();
}
inline const ::rm::UserData& UserDataBlock::friend_(int index) const {
  return friend__.Get(index);
}
inline ::rm::UserData* UserDataBlock::mutable_friend_(int index) {
  return friend__.Mutable(index);
}
inline ::rm::UserData* UserDataBlock::add_friend_() {
  return friend__.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rm::UserData >&
UserDataBlock::friend_() const {
  return friend__;
}
inline ::google::protobuf::RepeatedPtrField< ::rm::UserData >*
UserDataBlock::mutable_friend_() {
  return &friend__;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RedMalk_2eproto__INCLUDED
